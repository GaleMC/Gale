From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Martijn Muijsers <martijnmuijsers@live.nl>
Date: Sun, 25 Dec 2022 20:29:03 +0100
Subject: [PATCH] Skip unnecessary mob spawning computations

License: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)
Gale - https://galemc.org

This patch is based on the following patch:
"Only create a spawner state when we are actually spawning mobs"
By: PureGero <puregero@gmail.com>
As part of: MultiPaper (https://github.com/MultiPaper/MultiPaper)
Licensed under: GPL-3.0 (https://www.gnu.org/licenses/gpl-3.0.html)

diff --git a/src/main/java/net/minecraft/server/level/ServerChunkCache.java b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
index 4600ebd99e910287c3c97d6b9179af716da7f4c6..292a6450a2031756b3037c77dfc501e9396d7440 100644
--- a/src/main/java/net/minecraft/server/level/ServerChunkCache.java
+++ b/src/main/java/net/minecraft/server/level/ServerChunkCache.java
@@ -511,10 +511,15 @@ public class ServerChunkCache extends ChunkSource {
             int k = this.level.getGameRules().getInt(GameRules.RULE_RANDOMTICKING);
             boolean flag1 = this.level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) != 0L && worlddata.getGameTime() % this.level.ticksPerSpawnCategory.getLong(org.bukkit.entity.SpawnCategory.ANIMAL) == 0L; // CraftBukkit
 
+            // Gale start - MultiPaper - skip unnecessary mob spawning computations
+            NaturalSpawner.SpawnState spawnercreature_d; // moved down
+            final boolean flag2 = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && !this.level.players().isEmpty(); // CraftBukkit
+            boolean flag2AndHasNaturalSpawn = flag2 && this.anySpawnCategoryIsSpawnedThisTick();
+            if (flag2AndHasNaturalSpawn) {
+                // Gale end - MultiPaper - skip unnecessary mob spawning computations
             this.level.timings.countNaturalMobs.startTiming(); // Paper - timings
             int l = this.distanceManager.getNaturalSpawnChunkCount();
             // Paper start - per player mob spawning
-            NaturalSpawner.SpawnState spawnercreature_d; // moved down
             if ((this.spawnFriendlies || this.spawnEnemies) && this.level.paperConfig().entities.spawning.perPlayerMobSpawns) { // don't count mobs when animals and monsters are disabled
                 // re-set mob counts
                 for (ServerPlayer player : this.level.players) {
@@ -540,12 +545,15 @@ public class ServerChunkCache extends ChunkSource {
             this.lastSpawnState = spawnercreature_d;
             // Paper - optimise chunk tick iteration
             // Paper - optimise chunk tick iteration
+                // Gale start - MultiPaper - skip unnecessary mob spawning computations
+            } else {
+                spawnercreature_d = null;
+            }
+            // Gale end - MultiPaper - skip unnecessary mob spawning computations
             this.level.timings.chunkTicks.startTiming(); // Paper
 
             // Paper - optimise chunk tick iteration
 
-            boolean flag2 = this.level.getGameRules().getBoolean(GameRules.RULE_DOMOBSPAWNING) && !this.level.players().isEmpty(); // CraftBukkit
-
             // Paper start - optimise chunk tick iteration
             ChunkMap playerChunkMap = this.chunkMap;
             for (ServerPlayer player : this.level.players) {
@@ -628,7 +636,7 @@ public class ServerChunkCache extends ChunkSource {
                 // Paper end - optimise chunk tick iteration
                 if (tick && chunk1.chunkStatus.isOrAfter(net.minecraft.server.level.FullChunkStatus.ENTITY_TICKING)) { // Paper - optimise chunk tick iteration
                     chunk1.incrementInhabitedTime(j);
-                    if (spawn && flag2 && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunkcoordintpair)) { // Spigot // Paper - optimise chunk tick iteration
+                    if (spawn && flag2AndHasNaturalSpawn && (this.spawnEnemies || this.spawnFriendlies) && this.level.getWorldBorder().isWithinBounds(chunkcoordintpair)) { // Spigot // Paper - optimise chunk tick iteration // Gale - MultiPaper - skip unnecessary mob spawning computations
                         NaturalSpawner.spawnForChunk(this.level, chunk1, spawnercreature_d, this.spawnFriendlies, this.spawnEnemies, flag1);
                     }
 
@@ -673,6 +681,20 @@ public class ServerChunkCache extends ChunkSource {
         }
     }
 
+    // Gale start - MultiPaper - skip unnecessary mob spawning computations
+    public boolean anySpawnCategoryIsSpawnedThisTick() {
+        long gameTime = this.level.getLevelData().getGameTime();
+
+        for (long ticksForSpawnCategory : this.level.ticksPerSpawnCategory.values()) {
+            if (ticksForSpawnCategory != 0L && gameTime % ticksForSpawnCategory == 0L) {
+                return true;
+            }
+        }
+
+        return false;
+    }
+    // Gale end - MultiPaper - skip unnecessary mob spawning computations
+
     private void getFullChunk(long pos, Consumer<LevelChunk> chunkConsumer) {
         ChunkHolder playerchunk = this.getVisibleChunkIfPresent(pos);
 
